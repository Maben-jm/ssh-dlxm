<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
">

    <!-- 配置c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/dlxm?useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="user" value="root" />
        <property name="password" value="123456" />
        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="5" />

        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="30" />

        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="10"/>

        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="60"/>

        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="5" />

        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
            属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="0" />

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60" />

        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="30" />

        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
            保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="true" />
    </bean>

    <!--创建sessionFactory工厂-->
    <bean name="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation">
            <value>classpath:hibernate.cfg.xml</value>
        </property>
    </bean>

    <!--声明事物管理-->
    <bean name="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!--配置事物管理器-->

    <!--   **** 1:注解方式 ****      -->
    <tx:annotation-driven transaction-manager="txManager"></tx:annotation-driven>
    <!--
        **** 2:配置方式 ****
        transaction-manager   *** 通知
        attributes            *** 如果是以save开始的方法，隔离级别用默认的（默认的就是数据库的隔离级别）传播行为REQUIRED：如果有事物就用，没有就创建个新的
        pointcut              *** 切入点
        advisor               *** 关联通知和切入点
    -->
    <!--

        <tx:advice id="interceptor" transaction-manager="txManager">
            <tx:attributes>
                <tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED"  read-only="false"/>
                <tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED"  read-only="false"/>
                <tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED"  read-only="false"/>
                <tx:method name="*" read-only="true" />
            </tx:attributes>
        </tx:advice>
        <aop:config>
            <aop:pointcut id="pointcut" expression="execution(* com.maben.dlxm.service..*.*(..))"></aop:pointcut>
            <aop:advisor advice-ref="interceptor" pointcut-ref="pointcut"></aop:advisor>
        </aop:config>

    -->

</beans>